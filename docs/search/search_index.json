{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BlossomTune Orchestrator \u00b6 BlossomTune is a web-based orchestrator for managing Flower federated learning experiments. It provides a Gradio-based user interface for both administrators and participants, simplifying the process of joining, managing, and running federated learning tasks. The system is designed to be deployed via Docker and includes components for: Participant Management : A workflow for participants to request access, verify via email, and get approved by an administrator. Federation Control : Admin controls to start and stop the Flower Superlink and the Flower Runner processes. Security : Automated generation and management of TLS certificates and participant-specific authentication keys. Dynamic Configuration : A customizable UI text and settings system. Key Features \u00b6 Gradio Web Interface : A simple, interactive UI for all user roles. Dockerized Services : Easy deployment using docker compose for the gradio_app , superlink , and mailhog services. Secure Federation : Built-in TLS and EC key-pair authentication for participants. Blossomfile Generation : Approved participants receive a simple .zip file with all necessary keys and configuration to join. Pluggable Flower Apps : Easily add new federated learning tasks by dropping them into the flower_apps/ directory. Database Persistence : Uses SQLite with Alembic migrations to store participant status and application configuration.","title":"Home"},{"location":"#blossomtune-orchestrator","text":"BlossomTune is a web-based orchestrator for managing Flower federated learning experiments. It provides a Gradio-based user interface for both administrators and participants, simplifying the process of joining, managing, and running federated learning tasks. The system is designed to be deployed via Docker and includes components for: Participant Management : A workflow for participants to request access, verify via email, and get approved by an administrator. Federation Control : Admin controls to start and stop the Flower Superlink and the Flower Runner processes. Security : Automated generation and management of TLS certificates and participant-specific authentication keys. Dynamic Configuration : A customizable UI text and settings system.","title":"BlossomTune Orchestrator"},{"location":"#key-features","text":"Gradio Web Interface : A simple, interactive UI for all user roles. Dockerized Services : Easy deployment using docker compose for the gradio_app , superlink , and mailhog services. Secure Federation : Built-in TLS and EC key-pair authentication for participants. Blossomfile Generation : Approved participants receive a simple .zip file with all necessary keys and configuration to join. Pluggable Flower Apps : Easily add new federated learning tasks by dropping them into the flower_apps/ directory. Database Persistence : Uses SQLite with Alembic migrations to store participant status and application configuration.","title":"Key Features"},{"location":"api/","text":"","title":"API Reference"},{"location":"configuration/","text":"Configuration \u00b6 The application is configured primarily through environment variables, which are documented in blossomtune_gradio/config.py and set in your docker-compose.yaml or .env file. Key Environment Variables \u00b6 BLOSSOMTUNE_CONFIG : Path to the blossomtune.yaml file for UI text. SPACE_ID : The Hugging Face Space ID (e.g., ethicalabs/BlossomTune-Orchestrator ). Used for auth. SQLALCHEMY_URL : The database connection string. Defaults to SQLite in the data/db volume. SMTP_SERVER , SMTP_PORT , SMTP_USER , SMTP_PASSWORD : Credentials for the email sending service. Defaults to the local MailHog container. EMAIL_PROVIDER : Set to mailjet to use the Mailjet API instead of SMTP. SUPERLINK_MODE : internal (default) or external . In internal mode, the app starts its own Superlink. In external mode, it assumes one is running at SUPERLINK_HOST . SUPERLINK_HOST : Hostname of the Superlink (e.g., host.docker.internal when running in Docker). TLS_CERT_DIR : Path to the TLS certificate directory (defaults to data/certs ). AUTH_KEYS_DIR : Path to the participant auth keys directory (defaults to data/keys ). FLOWER_APPS : Comma-separated list of Python modules to load as Flower Apps (e.g., flower_apps.quickstart_huggingface ). UI Text Configuration \u00b6 All user-facing text in the Gradio UI can be modified without changing the Python code. File : blossomtune_gradio/settings/blossomtune.yaml Schema : blossomtune_gradio/settings/blossomtune.schema.json This file contains key-value pairs for all messages, labels, and markdown content. It supports Jinja2 templating for dynamic values (e.g., {{ participant_id }} ). See the developer guide for more details. Database Migrations \u00b6 The application uses Alembic to manage database schema changes. Config : alembic.ini Migrations : alembic/versions/ By default, migrations are run automatically on startup ( RUN_MIGRATIONS_ON_STARTUP=true ). You can disable this and run them manually using standard Alembic commands.","title":"Configuration"},{"location":"configuration/#configuration","text":"The application is configured primarily through environment variables, which are documented in blossomtune_gradio/config.py and set in your docker-compose.yaml or .env file.","title":"Configuration"},{"location":"configuration/#key-environment-variables","text":"BLOSSOMTUNE_CONFIG : Path to the blossomtune.yaml file for UI text. SPACE_ID : The Hugging Face Space ID (e.g., ethicalabs/BlossomTune-Orchestrator ). Used for auth. SQLALCHEMY_URL : The database connection string. Defaults to SQLite in the data/db volume. SMTP_SERVER , SMTP_PORT , SMTP_USER , SMTP_PASSWORD : Credentials for the email sending service. Defaults to the local MailHog container. EMAIL_PROVIDER : Set to mailjet to use the Mailjet API instead of SMTP. SUPERLINK_MODE : internal (default) or external . In internal mode, the app starts its own Superlink. In external mode, it assumes one is running at SUPERLINK_HOST . SUPERLINK_HOST : Hostname of the Superlink (e.g., host.docker.internal when running in Docker). TLS_CERT_DIR : Path to the TLS certificate directory (defaults to data/certs ). AUTH_KEYS_DIR : Path to the participant auth keys directory (defaults to data/keys ). FLOWER_APPS : Comma-separated list of Python modules to load as Flower Apps (e.g., flower_apps.quickstart_huggingface ).","title":"Key Environment Variables"},{"location":"configuration/#ui-text-configuration","text":"All user-facing text in the Gradio UI can be modified without changing the Python code. File : blossomtune_gradio/settings/blossomtune.yaml Schema : blossomtune_gradio/settings/blossomtune.schema.json This file contains key-value pairs for all messages, labels, and markdown content. It supports Jinja2 templating for dynamic values (e.g., {{ participant_id }} ). See the developer guide for more details.","title":"UI Text Configuration"},{"location":"configuration/#database-migrations","text":"The application uses Alembic to manage database schema changes. Config : alembic.ini Migrations : alembic/versions/ By default, migrations are run automatically on startup ( RUN_MIGRATIONS_ON_STARTUP=true ). You can disable this and run them manually using standard Alembic commands.","title":"Database Migrations"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome! This project follows a standard fork-and-pull-request workflow. Development Setup \u00b6 Clone the repository. It is recommended to use a Python 3.11 virtual environment. Install the project in editable mode with development dependencies: pip install -e \".[dev]\" This installs pytest , ruff , pre-commit , etc. Code Style and Linting \u00b6 This project uses Ruff for all linting and formatting. Linter : ruff-check Formatter : ruff-format Configuration is defined in the [tool.ruff] sections of pyproject.toml . Pre-commit Hooks \u00b6 The repository includes a .pre-commit-config.yaml file to automatically run ruff-check and ruff-format on every commit. To install the hooks: pre-commit install","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome! This project follows a standard fork-and-pull-request workflow.","title":"Contributing"},{"location":"contributing/#development-setup","text":"Clone the repository. It is recommended to use a Python 3.11 virtual environment. Install the project in editable mode with development dependencies: pip install -e \".[dev]\" This installs pytest , ruff , pre-commit , etc.","title":"Development Setup"},{"location":"contributing/#code-style-and-linting","text":"This project uses Ruff for all linting and formatting. Linter : ruff-check Formatter : ruff-format Configuration is defined in the [tool.ruff] sections of pyproject.toml .","title":"Code Style and Linting"},{"location":"contributing/#pre-commit-hooks","text":"The repository includes a .pre-commit-config.yaml file to automatically run ruff-check and ruff-format on every commit. To install the hooks: pre-commit install","title":"Pre-commit Hooks"},{"location":"installation/","text":"Installation \u00b6 BlossomTune is designed to be run as a set of Docker containers. The recommended way to install and run the application is by using docker compose . Prerequisites \u00b6 Docker Docker Compose Git (for cloning the repository) Python 3.11 (for development) Running with Docker Compose \u00b6 Clone the Repository git clone [ https://github.com/ethicalabs-ai/BlossomTune-Orchestrator.git ]( https://github.com/ethicalabs-ai/BlossomTune-Orchestrator.git ) cd BlossomTune-Orchestrator Set Environment Variables The docker-compose.yaml file requires certain environment variables. The most important one is HF_TOKEN if you are deploying on Hugging Face Spaces. Export the environment variable HF_TOKEN : export HF_TOKEN = your_huggingface_token_here Build and Run the Containers This command will build the blossomtune-orchestrator image from the Dockerfile and start the gradio_app , superlink , and mailhog services. docker compose up --build The Gradio UI will be available at http://localhost:7860 . The MailHog UI (for catching activation emails locally) will be at http://localhost:8025 . The Flower Superlink will be exposed on ports 9092 (SuperNode connections) and 9093 (Flower CLI). Data Persistence The docker-compose.yaml file is configured to mount local directories for persistent data: ./data/db : SQLite database ./data/certs : TLS certificates ./data/keys : Participant authentication keys ./data/results : Federated learning run artifacts","title":"Installation"},{"location":"installation/#installation","text":"BlossomTune is designed to be run as a set of Docker containers. The recommended way to install and run the application is by using docker compose .","title":"Installation"},{"location":"installation/#prerequisites","text":"Docker Docker Compose Git (for cloning the repository) Python 3.11 (for development)","title":"Prerequisites"},{"location":"installation/#running-with-docker-compose","text":"Clone the Repository git clone [ https://github.com/ethicalabs-ai/BlossomTune-Orchestrator.git ]( https://github.com/ethicalabs-ai/BlossomTune-Orchestrator.git ) cd BlossomTune-Orchestrator Set Environment Variables The docker-compose.yaml file requires certain environment variables. The most important one is HF_TOKEN if you are deploying on Hugging Face Spaces. Export the environment variable HF_TOKEN : export HF_TOKEN = your_huggingface_token_here Build and Run the Containers This command will build the blossomtune-orchestrator image from the Dockerfile and start the gradio_app , superlink , and mailhog services. docker compose up --build The Gradio UI will be available at http://localhost:7860 . The MailHog UI (for catching activation emails locally) will be at http://localhost:8025 . The Flower Superlink will be exposed on ports 9092 (SuperNode connections) and 9093 (Flower CLI). Data Persistence The docker-compose.yaml file is configured to mount local directories for persistent data: ./data/db : SQLite database ./data/certs : TLS certificates ./data/keys : Participant authentication keys ./data/results : Federated learning run artifacts","title":"Running with Docker Compose"},{"location":"developer_guide/adding_apps/","text":"How-To: Add a Flower App \u00b6 The orchestrator can run any Flower App that is structured as a Python module. The quickstart_huggingface app is provided as an example. Steps to Add a New App \u00b6 Create a New App Directory Create a new directory under flower_apps/ . The directory name should be a valid Python package name (e.g., my_fl_project ). mkdir flower_apps/my_fl_project Create Your Flower App Inside your new directory, create the necessary files for a Flower App. The minimum requirement is a client_app.py and a server_app.py that define a ClientApp and ServerApp respectively. flower_apps/my_fl_project/client_app.py : from flwr.client import ClientApp # ... your client logic ... app = ClientApp ( client_fn =... ) flower_apps/my_fl_project/server_app.py : from flwr.server import ServerApp # ... your server logic ... app = ServerApp ( server_fn =... ) You will also likely need an __init__.py and other files for your ML task, strategy, etc. Define Dependencies (Optional) If your app has specific Python dependencies, add a pyproject.toml or requirements.txt in your app's directory. The main Dockerfile does not automatically install these; you would need to modify it or ensure they are included in the base project's pyproject.toml . Register the App The orchestrator finds apps via the FLOWER_APPS environment variable. Add the Python module path of your new app to this list. You can set this in your docker-compose.yaml : services : gradio_app : environment : FLOWER_APPS : \"flower_apps.quickstart_huggingface,flower_apps.my_fl_project\" Or in blossomtune_gradio/config.py : FLOWER_APPS = os . getenv ( \"FLOWER_APPS\" , [ \"flower_apps.quickstart_huggingface\" , \"flower_apps.my_fl_project\" ]) Restart and Run After restarting the gradio_app container, your new app \"my_fl_project\" will appear in the \"Select Runner App\" dropdown in the Admin Panel.","title":"How-To: Add a Flower App"},{"location":"developer_guide/adding_apps/#how-to-add-a-flower-app","text":"The orchestrator can run any Flower App that is structured as a Python module. The quickstart_huggingface app is provided as an example.","title":"How-To: Add a Flower App"},{"location":"developer_guide/adding_apps/#steps-to-add-a-new-app","text":"Create a New App Directory Create a new directory under flower_apps/ . The directory name should be a valid Python package name (e.g., my_fl_project ). mkdir flower_apps/my_fl_project Create Your Flower App Inside your new directory, create the necessary files for a Flower App. The minimum requirement is a client_app.py and a server_app.py that define a ClientApp and ServerApp respectively. flower_apps/my_fl_project/client_app.py : from flwr.client import ClientApp # ... your client logic ... app = ClientApp ( client_fn =... ) flower_apps/my_fl_project/server_app.py : from flwr.server import ServerApp # ... your server logic ... app = ServerApp ( server_fn =... ) You will also likely need an __init__.py and other files for your ML task, strategy, etc. Define Dependencies (Optional) If your app has specific Python dependencies, add a pyproject.toml or requirements.txt in your app's directory. The main Dockerfile does not automatically install these; you would need to modify it or ensure they are included in the base project's pyproject.toml . Register the App The orchestrator finds apps via the FLOWER_APPS environment variable. Add the Python module path of your new app to this list. You can set this in your docker-compose.yaml : services : gradio_app : environment : FLOWER_APPS : \"flower_apps.quickstart_huggingface,flower_apps.my_fl_project\" Or in blossomtune_gradio/config.py : FLOWER_APPS = os . getenv ( \"FLOWER_APPS\" , [ \"flower_apps.quickstart_huggingface\" , \"flower_apps.my_fl_project\" ]) Restart and Run After restarting the gradio_app container, your new app \"my_fl_project\" will appear in the \"Select Runner App\" dropdown in the Admin Panel.","title":"Steps to Add a New App"},{"location":"developer_guide/custom_text/","text":"How-To: Customize UI Text \u00b6 All user-facing text (labels, descriptions, error messages) is loaded from an external YAML file and is not hardcoded in the Python source. This makes it easy to customize or translate the UI. 1. The Configuration File \u00b6 The text is loaded from: blossomtune_gradio/settings/blossomtune.yaml This file's location can be overridden at runtime by setting the BLOSSOMTUNE_CONFIG environment variable. 2. The Schema \u00b6 All keys in the YAML file are validated against a JSON schema to prevent typos and ensure all required text is defined: blossomtune_gradio/settings/blossomtune.schema.json If you add a new text item, you must also add it to the schema's properties and required sections. 3. The Loading Mechanism \u00b6 The blossomtune_gradio.settings.Settings class is a singleton that loads, validates, and parses the YAML file on application startup. It uses Jinja2 to render templates, allowing for dynamic content in the UI. Example: Changing an Error Message \u00b6 Open blossomtune.yaml Find the key you want to change. For example, the message for an invalid email: # blossomtune_gradio/settings/blossomtune.yaml ui : # ... invalid_email_md : | ### Invalid Input Please provide a valid email address. # ... Edit the Text You can change the text (including markdown) to whatever you need: # blossomtune_gradio/settings/blossomtune.yaml ui : # ... invalid_email_md : | ### Email Not Valid **Warning:** Your email address appears to be incorrect. Please try again. # ... Using Dynamic Content Some text fields, like the \"approved\" status, use Jinja2 variables. status_approved_md : | ### \u2705 Approved Your request for ID `{{ participant_id }}` has been approved. - **Your Assigned Partition ID:** `{{ partition_id }}` When the application renders this text, it passes the participant's data to the template, filling in the {{ ... }} placeholders.","title":"How-To: Customize UI Text"},{"location":"developer_guide/custom_text/#how-to-customize-ui-text","text":"All user-facing text (labels, descriptions, error messages) is loaded from an external YAML file and is not hardcoded in the Python source. This makes it easy to customize or translate the UI.","title":"How-To: Customize UI Text"},{"location":"developer_guide/custom_text/#1-the-configuration-file","text":"The text is loaded from: blossomtune_gradio/settings/blossomtune.yaml This file's location can be overridden at runtime by setting the BLOSSOMTUNE_CONFIG environment variable.","title":"1. The Configuration File"},{"location":"developer_guide/custom_text/#2-the-schema","text":"All keys in the YAML file are validated against a JSON schema to prevent typos and ensure all required text is defined: blossomtune_gradio/settings/blossomtune.schema.json If you add a new text item, you must also add it to the schema's properties and required sections.","title":"2. The Schema"},{"location":"developer_guide/custom_text/#3-the-loading-mechanism","text":"The blossomtune_gradio.settings.Settings class is a singleton that loads, validates, and parses the YAML file on application startup. It uses Jinja2 to render templates, allowing for dynamic content in the UI.","title":"3. The Loading Mechanism"},{"location":"developer_guide/custom_text/#example-changing-an-error-message","text":"Open blossomtune.yaml Find the key you want to change. For example, the message for an invalid email: # blossomtune_gradio/settings/blossomtune.yaml ui : # ... invalid_email_md : | ### Invalid Input Please provide a valid email address. # ... Edit the Text You can change the text (including markdown) to whatever you need: # blossomtune_gradio/settings/blossomtune.yaml ui : # ... invalid_email_md : | ### Email Not Valid **Warning:** Your email address appears to be incorrect. Please try again. # ... Using Dynamic Content Some text fields, like the \"approved\" status, use Jinja2 variables. status_approved_md : | ### \u2705 Approved Your request for ID `{{ participant_id }}` has been approved. - **Your Assigned Partition ID:** `{{ partition_id }}` When the application renders this text, it passes the participant's data to the template, filling in the {{ ... }} placeholders.","title":"Example: Changing an Error Message"},{"location":"developer_guide/project_structure/","text":"Project Structure \u00b6 This document outlines the main components of the BlossomTune Orchestrator codebase. . \u251c\u2500\u2500 alembic # Alembic database migrations \u251c\u2500\u2500 alembic.ini # Alembic config \u251c\u2500\u2500 blossomtune_gradio # Main Python package \u2502 \u251c\u2500\u2500 __main__.py # Entrypoint: runs migrations, launches app \u2502 \u251c\u2500\u2500 auth_keys.py # Generates EC keys, builds authorized_keys.csv \u2502 \u251c\u2500\u2500 blossomfile.py # Creates the .blossomfile zip archive \u2502 \u251c\u2500\u2500 config.py # Loads configuration from environment variables \u2502 \u251c\u2500\u2500 database.py # SQLAlchemy models (Request, Config) \u2502 \u251c\u2500\u2500 federation.py # Core logic for join/approve/deny workflow \u2502 \u251c\u2500\u2500 generate_tls.py # Logic for generating TLS certificates \u2502 \u251c\u2500\u2500 gradio_app.py # Gradio App Logic \u2502 \u251c\u2500\u2500 logs.py # In-memory log handler for the UI \u2502 \u251c\u2500\u2500 mail.py # Email sending logic (SMTP, Mailjet) \u2502 \u251c\u2500\u2500 processing.py # Starts/stops Superlink/Runner subprocesses \u2502 \u251c\u2500\u2500 settings # UI text config (YAML) and schema (JSON) \u2502 \u251c\u2500\u2500 tls.py # In-memory log handler for the UI \u2502 \u251c\u2500\u2500 ui # Gradio UI definitions \u2502 \u2502 \u251c\u2500\u2500 auth.py # Gradio auth handlers \u2502 \u2502 \u251c\u2500\u2500 callbacks.py # Gradio event handlers \u2502 \u2502 \u251c\u2500\u2500 components.py # Gradio component definitions \u2502 \u2514\u2500\u2500 util.py # Misc utils \u251c\u2500\u2500 docker_entrypoint.sh # Docker Entrypoint \u251c\u2500\u2500 docker-compose.yaml # Docker Compose File \u251c\u2500\u2500 Dockerfile # Docker Container File \u251c\u2500\u2500 docs # This documentation \u251c\u2500\u2500 flower_apps # Flower Apps \u2502 \u2514\u2500\u2500 quickstart_huggingface # Example Flower App \u251c\u2500\u2500 tests # Tests (PyTest)","title":"Project Structure"},{"location":"developer_guide/project_structure/#project-structure","text":"This document outlines the main components of the BlossomTune Orchestrator codebase. . \u251c\u2500\u2500 alembic # Alembic database migrations \u251c\u2500\u2500 alembic.ini # Alembic config \u251c\u2500\u2500 blossomtune_gradio # Main Python package \u2502 \u251c\u2500\u2500 __main__.py # Entrypoint: runs migrations, launches app \u2502 \u251c\u2500\u2500 auth_keys.py # Generates EC keys, builds authorized_keys.csv \u2502 \u251c\u2500\u2500 blossomfile.py # Creates the .blossomfile zip archive \u2502 \u251c\u2500\u2500 config.py # Loads configuration from environment variables \u2502 \u251c\u2500\u2500 database.py # SQLAlchemy models (Request, Config) \u2502 \u251c\u2500\u2500 federation.py # Core logic for join/approve/deny workflow \u2502 \u251c\u2500\u2500 generate_tls.py # Logic for generating TLS certificates \u2502 \u251c\u2500\u2500 gradio_app.py # Gradio App Logic \u2502 \u251c\u2500\u2500 logs.py # In-memory log handler for the UI \u2502 \u251c\u2500\u2500 mail.py # Email sending logic (SMTP, Mailjet) \u2502 \u251c\u2500\u2500 processing.py # Starts/stops Superlink/Runner subprocesses \u2502 \u251c\u2500\u2500 settings # UI text config (YAML) and schema (JSON) \u2502 \u251c\u2500\u2500 tls.py # In-memory log handler for the UI \u2502 \u251c\u2500\u2500 ui # Gradio UI definitions \u2502 \u2502 \u251c\u2500\u2500 auth.py # Gradio auth handlers \u2502 \u2502 \u251c\u2500\u2500 callbacks.py # Gradio event handlers \u2502 \u2502 \u251c\u2500\u2500 components.py # Gradio component definitions \u2502 \u2514\u2500\u2500 util.py # Misc utils \u251c\u2500\u2500 docker_entrypoint.sh # Docker Entrypoint \u251c\u2500\u2500 docker-compose.yaml # Docker Compose File \u251c\u2500\u2500 Dockerfile # Docker Container File \u251c\u2500\u2500 docs # This documentation \u251c\u2500\u2500 flower_apps # Flower Apps \u2502 \u2514\u2500\u2500 quickstart_huggingface # Example Flower App \u251c\u2500\u2500 tests # Tests (PyTest)","title":"Project Structure"},{"location":"user_guide/administrator/","text":"User Guide: For Administrators \u00b6 This guide explains how to manage the federation as an administrator (or Space owner). Accessing the Admin Panel \u00b6 Navigate to the orchestrator's Gradio URL. Log in with the Hugging Face account that owns the Space . If running locally, admin controls are enabled by default. The \"Admin Panel\" tab will become visible. Infrastructure Control \u00b6 This section controls the core Flower services. Superlink Status : Shows if the Superlink is \ud83d\udfe2 Running or \ud83d\udd34 Not Running . Start/Stop Superlink : Toggles the Flower Superlink process. This is the central server that participants connect to. This must be running for participants to connect. Federation Control \u00b6 This section controls the federated learning experiment itself. Runner Status : Shows if a federated run is \ud83d\udfe2 Running or \ud83d\udd34 Not Running . Select Runner App : A dropdown of all available Flower Apps found in the flower_apps/ directory. Run ID : A unique name for this experiment (e.g., run_123 ). Total Partitions : The total number of data partitions for this run. This number is given to all clients. Start/Stop Federated Run : Toggles the Flower Runner process. This process loads the selected \"Runner App\" and coordinates the training rounds. Federation Requests \u00b6 This section is for managing participants. Pending Requests \u00b6 This table lists all participants who have successfully activated their email and are waiting for approval. Approved Participants \u00b6 This table lists all participants who have been approved and assigned a Partition ID. Approval Workflow \u00b6 Click on a row in the \"Pending Requests\" table. The participant's ID will appear in the \"Selected Participant ID\" field. A unique, available \"Assign Partition ID\" will be automatically suggested. You can change this, but it must be unique. Click \"\u2705 Approve\" or \"\u274c Deny\" . On Approval : The participant's status is set to \"approved\". A new EC key pair ( .key and .pub ) is generated for them and stored in the data/keys volume. Their public key is added to the authorized_supernodes.csv file, granting them access to the Superlink. The next time the participant checks their status, they will get the \"Approved\" message and their .blossomfile download. On Denial : The participant's status is set to \"denied\". If they were previously approved, their public key is removed from authorized_supernodes.csv , revoking their access.","title":"For Administrators"},{"location":"user_guide/administrator/#user-guide-for-administrators","text":"This guide explains how to manage the federation as an administrator (or Space owner).","title":"User Guide: For Administrators"},{"location":"user_guide/administrator/#accessing-the-admin-panel","text":"Navigate to the orchestrator's Gradio URL. Log in with the Hugging Face account that owns the Space . If running locally, admin controls are enabled by default. The \"Admin Panel\" tab will become visible.","title":"Accessing the Admin Panel"},{"location":"user_guide/administrator/#infrastructure-control","text":"This section controls the core Flower services. Superlink Status : Shows if the Superlink is \ud83d\udfe2 Running or \ud83d\udd34 Not Running . Start/Stop Superlink : Toggles the Flower Superlink process. This is the central server that participants connect to. This must be running for participants to connect.","title":"Infrastructure Control"},{"location":"user_guide/administrator/#federation-control","text":"This section controls the federated learning experiment itself. Runner Status : Shows if a federated run is \ud83d\udfe2 Running or \ud83d\udd34 Not Running . Select Runner App : A dropdown of all available Flower Apps found in the flower_apps/ directory. Run ID : A unique name for this experiment (e.g., run_123 ). Total Partitions : The total number of data partitions for this run. This number is given to all clients. Start/Stop Federated Run : Toggles the Flower Runner process. This process loads the selected \"Runner App\" and coordinates the training rounds.","title":"Federation Control"},{"location":"user_guide/administrator/#federation-requests","text":"This section is for managing participants.","title":"Federation Requests"},{"location":"user_guide/administrator/#pending-requests","text":"This table lists all participants who have successfully activated their email and are waiting for approval.","title":"Pending Requests"},{"location":"user_guide/administrator/#approved-participants","text":"This table lists all participants who have been approved and assigned a Partition ID.","title":"Approved Participants"},{"location":"user_guide/administrator/#approval-workflow","text":"Click on a row in the \"Pending Requests\" table. The participant's ID will appear in the \"Selected Participant ID\" field. A unique, available \"Assign Partition ID\" will be automatically suggested. You can change this, but it must be unique. Click \"\u2705 Approve\" or \"\u274c Deny\" . On Approval : The participant's status is set to \"approved\". A new EC key pair ( .key and .pub ) is generated for them and stored in the data/keys volume. Their public key is added to the authorized_supernodes.csv file, granting them access to the Superlink. The next time the participant checks their status, they will get the \"Approved\" message and their .blossomfile download. On Denial : The participant's status is set to \"denied\". If they were previously approved, their public key is removed from authorized_supernodes.csv , revoking their access.","title":"Approval Workflow"},{"location":"user_guide/participant/","text":"User Guide: For Participants \u00b6 This guide explains how to join a federated learning experiment hosted by the BlossomTune Orchestrator. 1. Request to Join \u00b6 Navigate to the orchestrator's Gradio URL. Go to the \"Join Federation\" tab. If the app is hosted on Hugging Face Spaces, you must log in with your Hugging Face account . Your HF handle will be used as your identifier. If running locally, enter a unique Hugging Face Handle (or username). Enter your Contact E-mail address. This is where your activation code will be sent. Leave the Activation Code field blank for the first request. Click \"Submit Request / Activate\" . You should see a confirmation message: \"\u2705 Registration Submitted! Please check your email for an activation code...\" 2. Activate Your Request \u00b6 Check your email for a message with the subject \"Your BlossomTune Activation Code\". (If running locally, check the MailHog UI at http://localhost:8025 ). Copy the activation code from the email. Return to the \"Join Federation\" tab. Your HF Handle and E-mail should still be filled in. Enter the Activation Code into its field. Click \"Submit Request / Activate\" again. You should see a new message: \"\u2705 Activation Successful! Your request is now pending review by an administrator.\" 3. Check Approval Status \u00b6 After an administrator has reviewed your request, you can check your status. Return to the \"Join Federation\" tab. Ensure you are logged in (or your HF Handle is entered). Enter your E-mail and Activation Code. Click \"Submit Request / Activate\" . You will see one of three statuses: Pending : \"\u23f3 Pending. Your request has been activated and is awaiting administrator review.\" Denied : \"\u274c Denied. Your request for ID ... has been denied.\" Approved : \"\u2705 Approved. Your request for ID ... has been approved.\" 4. Download Credentials (If Approved) \u00b6 If your request is approved, the status message will include your connection details (like your partition_id ) and a download button will appear. Click the download button (e.g., PARTICIPANT-ID-blossomfile.zip ). This Blossomfile is a .zip archive containing everything you need to connect: blossom.json : Configuration file with your partition-id . ca.crt : The federation's public root TLS certificate. auth.key : Your private authentication key. auth.pub : Your public authentication key. You can now use these files with your Flower SuperNode client to connect to the federation, as shown in the example command in the UI.","title":"For Participants"},{"location":"user_guide/participant/#user-guide-for-participants","text":"This guide explains how to join a federated learning experiment hosted by the BlossomTune Orchestrator.","title":"User Guide: For Participants"},{"location":"user_guide/participant/#1-request-to-join","text":"Navigate to the orchestrator's Gradio URL. Go to the \"Join Federation\" tab. If the app is hosted on Hugging Face Spaces, you must log in with your Hugging Face account . Your HF handle will be used as your identifier. If running locally, enter a unique Hugging Face Handle (or username). Enter your Contact E-mail address. This is where your activation code will be sent. Leave the Activation Code field blank for the first request. Click \"Submit Request / Activate\" . You should see a confirmation message: \"\u2705 Registration Submitted! Please check your email for an activation code...\"","title":"1. Request to Join"},{"location":"user_guide/participant/#2-activate-your-request","text":"Check your email for a message with the subject \"Your BlossomTune Activation Code\". (If running locally, check the MailHog UI at http://localhost:8025 ). Copy the activation code from the email. Return to the \"Join Federation\" tab. Your HF Handle and E-mail should still be filled in. Enter the Activation Code into its field. Click \"Submit Request / Activate\" again. You should see a new message: \"\u2705 Activation Successful! Your request is now pending review by an administrator.\"","title":"2. Activate Your Request"},{"location":"user_guide/participant/#3-check-approval-status","text":"After an administrator has reviewed your request, you can check your status. Return to the \"Join Federation\" tab. Ensure you are logged in (or your HF Handle is entered). Enter your E-mail and Activation Code. Click \"Submit Request / Activate\" . You will see one of three statuses: Pending : \"\u23f3 Pending. Your request has been activated and is awaiting administrator review.\" Denied : \"\u274c Denied. Your request for ID ... has been denied.\" Approved : \"\u2705 Approved. Your request for ID ... has been approved.\"","title":"3. Check Approval Status"},{"location":"user_guide/participant/#4-download-credentials-if-approved","text":"If your request is approved, the status message will include your connection details (like your partition_id ) and a download button will appear. Click the download button (e.g., PARTICIPANT-ID-blossomfile.zip ). This Blossomfile is a .zip archive containing everything you need to connect: blossom.json : Configuration file with your partition-id . ca.crt : The federation's public root TLS certificate. auth.key : Your private authentication key. auth.pub : Your public authentication key. You can now use these files with your Flower SuperNode client to connect to the federation, as shown in the example command in the UI.","title":"4. Download Credentials (If Approved)"}]}